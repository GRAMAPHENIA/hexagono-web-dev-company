import { db } from '@/lib/db'
import { env, checkExternalServices, isProductionReady } from '@/lib/config/env'
import { healthCheck } from '@/lib/database'

// Funci√≥n para inicializar la aplicaci√≥n
export async function initializeApp() {
  console.log('üöÄ Inicializando aplicaci√≥n Hex√°gono Web...')

  try {
    // 1. Verificar variables de entorno
    console.log('üìã Verificando configuraci√≥n...')
    const services = checkExternalServices()
    
    console.log('‚úÖ Variables de entorno validadas')
    console.log(`   - Base de datos: ${services.database ? '‚úÖ' : '‚ùå'}`)
    console.log(`   - Email: ${services.email ? '‚úÖ' : '‚ö†Ô∏è  (usando placeholder)'}`)
    console.log(`   - Almacenamiento: ${services.fileStorage ? '‚úÖ' : '‚ö†Ô∏è  (usando placeholder)'}`)
    console.log(`   - Autenticaci√≥n: ${services.auth ? '‚úÖ' : '‚ö†Ô∏è  (usando placeholder)'}`)

    // 2. Verificar conexi√≥n a la base de datos
    console.log('üóÑÔ∏è  Verificando conexi√≥n a la base de datos...')
    let dbHealth
    let retries = 3
    
    while (retries > 0) {
      dbHealth = await healthCheck.checkConnection()
      
      if (dbHealth.status === 'healthy') {
        console.log('‚úÖ Conexi√≥n a la base de datos exitosa')
        break
      } else {
        retries--
        if (retries > 0) {
          console.log(`‚ö†Ô∏è  Reintentando conexi√≥n... (${retries} intentos restantes)`)
          await new Promise(resolve => setTimeout(resolve, 2000))
        } else {
          console.error('‚ùå Error de conexi√≥n a la base de datos:', dbHealth.error)
          console.log('üí° Sugerencias:')
          console.log('   - Verificar que el servidor de base de datos est√© ejecut√°ndose')
          console.log('   - Revisar la variable DATABASE_URL en .env')
          console.log('   - Ejecutar: pnpm run db:push')
          throw new Error('Database connection failed after retries')
        }
      }
    }

    // 3. Verificar esquema de la base de datos
    console.log('üìä Verificando esquema de la base de datos...')
    try {
      await db.quote.findFirst()
      console.log('‚úÖ Esquema de base de datos verificado')
    } catch (error) {
      console.error('‚ùå Error en el esquema de la base de datos:', error)
      throw new Error('Database schema verification failed')
    }

    // 4. Obtener estad√≠sticas de la base de datos
    console.log('üìà Obteniendo estad√≠sticas...')
    const stats = await healthCheck.getStats()
    console.log(`   - Total de cotizaciones: ${stats.quotes.total}`)
    console.log(`   - Cotizaciones pendientes: ${stats.quotes.pending}`)
    console.log(`   - Cotizaciones completadas: ${stats.quotes.completed}`)

    // 5. Verificar si est√° listo para producci√≥n
    if (env.NODE_ENV === 'production') {
      console.log('üîç Verificando configuraci√≥n de producci√≥n...')
      const productionReady = isProductionReady()
      
      if (productionReady) {
        console.log('‚úÖ Configuraci√≥n de producci√≥n verificada')
      } else {
        console.warn('‚ö†Ô∏è  Advertencia: Algunas configuraciones usan valores placeholder')
      }
    }

    console.log('üéâ Aplicaci√≥n inicializada correctamente')
    return {
      success: true,
      services,
      dbHealth,
      stats,
      environment: env.NODE_ENV
    }

  } catch (error) {
    console.error('üí• Error durante la inicializaci√≥n:', error)
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
      environment: env.NODE_ENV
    }
  }
}

// Funci√≥n para verificar dependencias cr√≠ticas
export async function checkCriticalDependencies() {
  const checks = {
    prisma: false,
    zod: false,
    nextjs: false
  }

  try {
    // Verificar Prisma
    await import('@prisma/client')
    checks.prisma = true
  } catch (error) {
    console.error('‚ùå Prisma no est√° disponible:', error)
  }

  try {
    // Verificar Zod
    await import('zod')
    checks.zod = true
  } catch (error) {
    console.error('‚ùå Zod no est√° disponible:', error)
  }

  try {
    // Verificar Next.js
    await import('next')
    checks.nextjs = true
  } catch (error) {
    console.error('‚ùå Next.js no est√° disponible:', error)
  }

  return checks
}

// Funci√≥n para crear datos de prueba en desarrollo
export async function seedDevelopmentData() {
  if (env.NODE_ENV !== 'development') {
    console.log('‚ö†Ô∏è  Seed solo disponible en desarrollo')
    return
  }

  console.log('üå± Creando datos de prueba...')

  try {
    // Verificar si ya existen datos
    const existingQuotes = await db.quote.count()
    
    if (existingQuotes > 0) {
      console.log(`‚ÑπÔ∏è  Ya existen ${existingQuotes} cotizaciones en la base de datos`)
      return
    }

    // Crear cotizaci√≥n de ejemplo
    const sampleQuote = await db.quote.create({
      data: {
        quoteNumber: 'HEX-202501-0001',
        clientName: 'Juan P√©rez',
        clientEmail: 'juan.perez@ejemplo.com',
        clientPhone: '+54 11 1234-5678',
        clientCompany: 'Empresa Ejemplo S.A.',
        serviceType: 'CORPORATE_WEB',
        description: 'Sitio web corporativo para empresa de servicios',
        timeline: '3-4 semanas',
        budgetRange: '$200.000 - $300.000',
        estimatedPrice: 250000,
        status: 'PENDING',
        priority: 'MEDIUM',
        accessToken: 'sample-access-token-123456789',
        features: {
          create: [
            {
              featureName: 'SEO Avanzado',
              featureCost: 45000
            },
            {
              featureName: 'Blog Integrado',
              featureCost: 35000
            }
          ]
        },
        notes: {
          create: [
            {
              author: 'Sistema',
              note: 'Cotizaci√≥n creada autom√°ticamente para pruebas',
              isInternal: true
            }
          ]
        },
        statusHistory: {
          create: [
            {
              previousStatus: null,
              newStatus: 'PENDING',
              changedBy: 'Sistema',
              notes: 'Cotizaci√≥n inicial creada'
            }
          ]
        }
      }
    })

    console.log('‚úÖ Datos de prueba creados exitosamente')
    console.log(`   - Cotizaci√≥n ID: ${sampleQuote.id}`)
    console.log(`   - N√∫mero: ${sampleQuote.quoteNumber}`)
    console.log(`   - Token de acceso: ${sampleQuote.accessToken}`)

  } catch (error) {
    console.error('‚ùå Error creando datos de prueba:', error)
  }
}

// Funci√≥n para limpiar datos de desarrollo
export async function cleanDevelopmentData() {
  if (env.NODE_ENV !== 'development') {
    console.log('‚ö†Ô∏è  Limpieza solo disponible en desarrollo')
    return
  }

  console.log('üßπ Limpiando datos de desarrollo...')

  try {
    // Eliminar en orden correcto debido a las relaciones
    await db.quoteStatusHistory.deleteMany()
    await db.quoteNote.deleteMany()
    await db.quoteAttachment.deleteMany()
    await db.quoteFeature.deleteMany()
    await db.quote.deleteMany()

    console.log('‚úÖ Datos de desarrollo limpiados')

  } catch (error) {
    console.error('‚ùå Error limpiando datos:', error)
  }
}

// Funci√≥n para mostrar informaci√≥n del sistema
export function showSystemInfo() {
  console.log('\nüìã Informaci√≥n del Sistema')
  console.log('========================')
  console.log(`Entorno: ${env.NODE_ENV}`)
  console.log(`URL de la aplicaci√≥n: ${env.NEXT_PUBLIC_APP_URL}`)
  console.log(`Email de la empresa: ${env.COMPANY_EMAIL}`)
  console.log(`Tel√©fono: ${env.COMPANY_PHONE}`)
  console.log(`Base de datos: ${env.DATABASE_URL.includes('localhost') ? 'Local' : 'Remota'}`)
  console.log('========================\n')
}